package main

import (
	"context"
	"fmt"
	"log"
	"math/big"

	// Smart contract generated by abigen
	acs_registry "acs-eth/contracts"
	"acs-eth/utils"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
)

func main() {
	// 1) Load environment variables from .env file
	// err := utils.LoadEnv(".env")
	// if err != nil {
	// 	log.Fatalf("Error loading .env file: %v", err)
	// }

	// 2) Get environment variables
	rpcURL := utils.GetEnv("RPC_URL")
	privKeyHex := utils.GetEnv("PRIVATE_KEY")[2:] // 맨 앞의 0x 잘라내기
	chainID, _ := new(big.Int).SetString(utils.GetEnv("CHAIN_ID"), 10)

	// 2) Connect to RPC endpoint
	client, err := ethclient.Dial(rpcURL)
	if err != nil {
		log.Fatalf("RPC connection to %s failed: %v", rpcURL, err)
	}
	defer client.Close()

	// 3) Prepare the signer with user's private key
	key, _ := crypto.HexToECDSA(privKeyHex)
	signer, _ := bind.NewKeyedTransactorWithChainID(key, chainID)

	// 4) Check if the account is unlocked and has enough balance to deploy the contract
	balance, err := client.BalanceAt(context.Background(), signer.From, nil)
	if err != nil {
		log.Fatalf("Failed to fetch balance: %v", err)
	}
	fmt.Printf("Account[%s] balance: %s wei\n", signer.From, balance.String())

	// 4) Deploy the smart contract to the Ethereum network
	address, tx, instance, err := acs_registry.DeployContracts(signer, client)
	if err != nil {
		log.Fatal("DeployContracts() failed:", err)
	}
	fmt.Printf("DeployContracts() succeeded, instance: %v, txId: %v, addr:%v\n", instance, tx.Hash().Hex(), address.Hex())

	// 5) Check if the transaction is pending
	tx, pending, err := client.TransactionByHash(context.Background(), tx.Hash())
	if err != nil {
		log.Fatalf("Failed to fetch transaction by hash: %v", err)
	}
	fmt.Println("Is tx pending?", pending) // if pending is true, the transaction is not yet mined

	// 6) Wait for the transaction to be mined
	receipt, err := bind.WaitDeployed(context.Background(), client, tx)
	if err != nil {
		log.Fatalf("Waiting DeployContracts() failed: %v", err)
	}

	fmt.Println("✅ Deployed Contract Address:", receipt.Hex())

	// 스마트 컨트랙트 인스턴스: &{{0xc00015b408} {0xc00015b408} {0xc00015b408}}
	// 스마트 컨트랙트 주소: 0x5A6E1EFA4F0E043a687A625d1e29E75C7c746017
	// 스마트 컨트랙트 배포 트랜잭션: 0xd0509cbdba9cdeee5e4d1f51f12b074f65500cfce766987f42461dcefdad88a6

	// INFO [04-22|08:13:03.684] Submitted contract creation
	// hash=0xd0509cbdba9cdeee5e4d1f51f12b074f65500cfce766987f42461dcefdad88a6
	// from=0xB92d326096901Ec362e15D9567e2faE5Cf027766
	// nonce=0 contract=0x5A6E1EFA4F0E043a687A625d1e29E75C7c746017 value=0
}
